name: Get latest upstream version

on:
  schedule:
    - cron:  '0 4,16 * * *'
  workflow_dispatch:

env:
  git_name: github-actions[bot]
  git_email: 41898282+github-actions[bot]@users.noreply.github.com
  api: https://api.github.com
  registry: ghcr.io
  upstream: ngoduykhanh/wireguard-ui

jobs:
  
  fetch-and-update:
  
    runs-on: ubuntu-latest
    
    steps:
      
      - uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
          fetch-depth: 0
        
      - name: Init
        id: init
        run: >
          echo "::set-output name=repository_name::$(
          echo '${{ github.repository }}'
          | awk -F '/' '{print $2}'
          )"
          
          git config --global user.name "${{ env.git_name }}"
          
          git config --global user.email "${{ env.git_email }}"
      
      - name: Get info
        id: facts
        run: >
          echo "::set-output name=branch::$(
          curl -sL ${{ env.api }}/repos/${{ env.upstream }}
          | jq -r '.default_branch'
          )"
          
          echo "::set-output name=built_tags::$(
          curl -sL --fail
          --header 'Accept: application/vnd.github.v3+json'
          -u ${{ github.actor }}:${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
          'https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${{ steps.init.outputs.repository_name }}/versions'
          | jq -r -c '[ .[].metadata.container.tags[] | tojson ]'
          )"
      
      - name: Fetch upstream
        id: upstream
        run: >
          echo "::set-output name=tag::$(
          curl -sL
          ${{ env.api }}/repos/${{ env.upstream }}/releases/latest
          | jq -r '.tag_name'
          )"
          
          echo "::set-output name=tag_sha::$(
          curl -sL
          ${{ env.api }}/repos/${{ env.upstream }}/releases/latest
          | jq -r '.target_commitish'
          )"
          
          echo "::set-output name=sha::$(
          curl -sL
          ${{ env.api }}/repos/${{ env.upstream }}/commits/${{ steps.facts.outputs.branch }}
          | jq -r '.sha'
          )"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3.4.1
        with:
          github-token: ${{ github.token }}
          images: ${{ env.registry }}/${{ github.repository }}
          tags: |
            type=semver,priority=900,pattern={{version}},value=${{ steps.upstream.outputs.tag }}
            
      - id: tag
        run: |
          echo "::set-output name=normalized_tag::${{ 
              fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version']
            }}"
          
      - name: Gathered facts
        run: |
          echo "Branch: ${{ steps.facts.outputs.branch }}"
          echo "Latest tag: ${{ steps.upstream.outputs.tag }}"
          echo "Latest tag SHA: ${{ steps.upstream.outputs.tag_sha }}"
          echo "Latest commit SHA: ${{ steps.upstream.outputs.sha }}"
          echo "::group::Existing tags for ghcr.io/${{ github.repository }}"
          echo "$(echo ${{ steps.facts.outputs.built_tags }} | jq -r)"
          echo "::endgroup::"
          echo "Running Build Tag task?"
          echo "${{ ! contains( steps.facts.outputs.built_tags,
            steps.tag.outputs.normalized_tag ) }}"
          echo "Running Build Branch task?"
          echo "${{ ! contains( steps.facts.outputs.built_tags,
            steps.upstream.outputs.sha ) }}"
          
          
      - name: Repository Dispatch â€” Build Tag
        if: ${{ ! contains( steps.facts.outputs.built_tags, steps.tag.outputs.normalized_tag ) }}
        uses: peter-evans/repository-dispatch@v1.1.3
        with:
          token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
          event-type: trigger-ci
          client-payload: >
            {
            "ref": "${{ steps.upstream.outputs.tag }}",
            "sha": "${{ steps.upstream.outputs.tag_sha }}",
            "branch": "${{ steps.facts.outputs.branch }}"
            }

      - name: Repository Dispatch - Build Branch
        if: ${{ ! contains( steps.facts.outputs.built_tags, steps.upstream.outputs.sha ) }}
        uses: peter-evans/repository-dispatch@v1.1.3
        with:
          token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
          event-type: trigger-ci
          client-payload: >
            {
            "ref": "${{ steps.facts.outputs.branch }}",
            "sha": "${{ steps.upstream.outputs.sha }}",
            "branch": "${{ steps.facts.outputs.branch }}"
            }
